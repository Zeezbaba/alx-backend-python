pipeline {
    agent {
        dockerfile {
            filename 'messaging_app/Dockerfile.jenkins'
        }
    }

    environment {
        IMAGE_NAME = 'zeezbabadev/messaging_app'
    }

    stages {
        stage('Clone GitHub Repo') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/master']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/Zeezbaba/alx-backend-python.git',
                        credentialsId: 'github-creds'
                    ]]
                ]) 
            }
        }

        stage('Check Git Branch') {
            steps {
                sh 'git branch'
            }
        }

        stage('Set Up Python & Install Requirements') {
            steps {
                sh '''
                    apt-get update
                    apt-get install -y build-essential default-libmysqlclient-dev pkg-config python3-venv python3-pip
                '''
                // sh 'python3 -m venv venv'
                // sh './venv/bin/pip install -r messaging_app/requirements.txt'
                sh 'pip3 install -r messaging_app/Requirements.txt'
            }
        }

        stage('Run Tests') {
            steps {
                sh './venv/bin/pytest messaging_app/chats/tests/ --junitxml=report.xml'
            }
        }

        stage('Achive Test Report') {
            steps {
                junit 'report.xml'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $IMAGE_NAME:latest messaging_app'
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker push $IMAGE_NAME:latest
                        '''
                    }
                }
            }
        }
    }

    post {
        failure {
            echo 'Test failed! Check the report.'
        }
        success {
            echo 'pipeline completed successfully!'
        }
    }
}